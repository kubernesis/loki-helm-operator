apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "charts.example.com/v1alpha1",
          "kind": "Loki",
          "metadata": {
            "name": "loki-sample"
          },
          "spec": {
            "backend": {
              "affinity": "podAntiAffinity:\n  requiredDuringSchedulingIgnoredDuringExecution:\n    - labelSelector:\n        matchLabels:\n          {{- include \"loki.backendSelectorLabels\" . | nindent 10 }}\n      topologyKey: kubernetes.io/hostname\n",
              "annotations": {},
              "autoscaling": {
                "behavior": {},
                "enabled": false,
                "maxReplicas": 3,
                "minReplicas": 1,
                "targetCPUUtilizationPercentage": 60,
                "targetMemoryUtilizationPercentage": null
              },
              "extraArgs": [],
              "extraEnv": [],
              "extraEnvFrom": [],
              "extraVolumeMounts": [],
              "extraVolumes": [],
              "image": {
                "registry": null,
                "repository": null,
                "tag": null
              },
              "initContainers": [],
              "nodeSelector": {},
              "persistence": {
                "enableStatefulSetAutoDeletePVC": true,
                "selector": null,
                "size": "10Gi",
                "storageClass": null
              },
              "podAnnotations": {},
              "podLabels": {},
              "podManagementPolicy": "Parallel",
              "priorityClassName": null,
              "replicas": 3,
              "resources": {},
              "selectorLabels": {},
              "serviceLabels": {},
              "targetModule": "backend",
              "terminationGracePeriodSeconds": 300,
              "tolerations": []
            },
            "clusterLabelOverride": null,
            "enterprise": {
              "adminApi": {
                "enabled": true
              },
              "adminToken": {
                "additionalNamespaces": [],
                "secret": null
              },
              "canarySecret": null,
              "cluster_name": null,
              "config": "{{- if .Values.enterprise.adminApi.enabled }}\n{{- if or .Values.minio.enabled (eq .Values.loki.storage.type \"s3\") (eq .Values.loki.storage.type \"gcs\") (eq .Values.loki.storage.type \"azure\") }}\nadmin_client:\n  storage:\n    s3:\n      bucket_name: {{ .Values.loki.storage.bucketNames.admin }}\n{{- end }}\n{{- end }}\nauth:\n  type: {{ .Values.enterprise.adminApi.enabled | ternary \"enterprise\" \"trust\" }}\nauth_enabled: {{ .Values.loki.auth_enabled }}\ncluster_name: {{ include \"loki.clusterName\" . }}\nlicense:\n  path: /etc/loki/license/license.jwt\n",
              "enabled": false,
              "externalConfigName": "",
              "externalLicenseName": null,
              "image": {
                "digest": null,
                "pullPolicy": "IfNotPresent",
                "registry": "docker.io",
                "repository": "grafana/enterprise-logs",
                "tag": null
              },
              "license": {
                "contents": "NOTAVALIDLICENSE"
              },
              "provisioner": {
                "additionalTenants": [],
                "annotations": {},
                "enabled": true,
                "env": [],
                "extraVolumeMounts": [],
                "image": {
                  "digest": null,
                  "pullPolicy": "IfNotPresent",
                  "registry": "docker.io",
                  "repository": "grafana/enterprise-logs-provisioner",
                  "tag": null
                },
                "labels": {},
                "priorityClassName": null,
                "provisionedSecretPrefix": null,
                "securityContext": {
                  "fsGroup": 10001,
                  "runAsGroup": 10001,
                  "runAsNonRoot": true,
                  "runAsUser": 10001
                }
              },
              "tokengen": {
                "annotations": {},
                "enabled": true,
                "env": [],
                "extraArgs": [],
                "extraEnvFrom": [],
                "extraVolumeMounts": [],
                "extraVolumes": [],
                "labels": {},
                "priorityClassName": "",
                "securityContext": {
                  "fsGroup": 10001,
                  "runAsGroup": 10001,
                  "runAsNonRoot": true,
                  "runAsUser": 10001
                },
                "targetModule": "tokengen",
                "tolerations": []
              },
              "useExternalLicense": false,
              "version": "v1.7.2"
            },
            "extraObjects": [],
            "fullnameOverride": null,
            "gateway": {
              "affinity": "podAntiAffinity:\n  requiredDuringSchedulingIgnoredDuringExecution:\n    - labelSelector:\n        matchLabels:\n          {{- include \"loki.gatewaySelectorLabels\" . | nindent 10 }}\n      topologyKey: kubernetes.io/hostname\n",
              "annotations": {},
              "autoscaling": {
                "behavior": {},
                "enabled": false,
                "maxReplicas": 3,
                "minReplicas": 1,
                "targetCPUUtilizationPercentage": 60,
                "targetMemoryUtilizationPercentage": null
              },
              "basicAuth": {
                "enabled": false,
                "existingSecret": null,
                "htpasswd": "{{ if .Values.loki.tenants }}\n\n\n  {{- range $t := .Values.loki.tenants }}\n{{ htpasswd (required \"All tenants must have a 'name' set\" $t.name) (required \"All tenants must have a 'password' set\" $t.password) }}\n\n\n  {{- end }}\n{{ else }} {{ htpasswd (required \"'gateway.basicAuth.username' is required\" .Values.gateway.basicAuth.username) (required \"'gateway.basicAuth.password' is required\" .Values.gateway.basicAuth.password) }} {{ end }}",
                "password": null,
                "username": null
              },
              "containerSecurityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "readOnlyRootFilesystem": true
              },
              "deploymentStrategy": {
                "type": "RollingUpdate"
              },
              "enabled": true,
              "extraArgs": [],
              "extraEnv": [],
              "extraEnvFrom": [],
              "extraVolumeMounts": [],
              "extraVolumes": [],
              "image": {
                "digest": null,
                "pullPolicy": "IfNotPresent",
                "registry": "docker.io",
                "repository": "nginxinc/nginx-unprivileged",
                "tag": "1.19-alpine"
              },
              "ingress": {
                "annotations": {},
                "enabled": false,
                "hosts": [
                  {
                    "host": "gateway.loki.example.com",
                    "paths": [
                      {
                        "path": "/"
                      }
                    ]
                  }
                ],
                "ingressClassName": "",
                "labels": {},
                "tls": [
                  {
                    "hosts": [
                      "gateway.loki.example.com"
                    ],
                    "secretName": "loki-gateway-tls"
                  }
                ]
              },
              "lifecycle": {},
              "nginxConfig": {
                "customBackendUrl": null,
                "customReadUrl": null,
                "customWriteUrl": null,
                "file": "{{- include \"loki.nginxFile\" . | indent 2 -}}\n",
                "httpSnippet": "{{ if .Values.loki.tenants }}proxy_set_header X-Scope-OrgID $remote_user;{{ end }}",
                "logFormat": "main '$remote_addr - $remote_user [$time_local]  $status '\n        '\"$request\" $body_bytes_sent \"$http_referer\" '\n        '\"$http_user_agent\" \"$http_x_forwarded_for\"';",
                "serverSnippet": ""
              },
              "nodeSelector": {},
              "podAnnotations": {},
              "podLabels": {},
              "podSecurityContext": {
                "fsGroup": 101,
                "runAsGroup": 101,
                "runAsNonRoot": true,
                "runAsUser": 101
              },
              "priorityClassName": null,
              "readinessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "http"
                },
                "initialDelaySeconds": 15,
                "timeoutSeconds": 1
              },
              "replicas": 1,
              "resources": {},
              "service": {
                "annotations": {},
                "clusterIP": null,
                "labels": {},
                "loadBalancerIP": null,
                "nodePort": null,
                "port": 80,
                "type": "ClusterIP"
              },
              "terminationGracePeriodSeconds": 30,
              "tolerations": [],
              "verboseLogging": true
            },
            "global": {
              "clusterDomain": "cluster.local",
              "dnsNamespace": "kube-system",
              "dnsService": "kube-dns",
              "image": {
                "registry": null
              },
              "priorityClassName": null
            },
            "grafana-agent-operator": {
              "affinity": {},
              "annotations": {},
              "extraArgs": [],
              "fullnameOverride": "",
              "global": {
                "clusterDomain": "cluster.local",
                "dnsNamespace": "kube-system",
                "dnsService": "kube-dns",
                "image": {},
                "priorityClassName": null
              },
              "image": {
                "pullPolicy": "IfNotPresent",
                "pullSecrets": [],
                "registry": "docker.io",
                "repository": "grafana/agent-operator",
                "tag": "v0.25.1"
              },
              "kubeletService": {
                "namespace": "default",
                "serviceName": "kubelet"
              },
              "nameOverride": "",
              "nodeSelector": {},
              "podAnnotations": {},
              "podLabels": {},
              "podSecurityContext": {},
              "rbac": {
                "create": true
              },
              "resources": {},
              "serviceAccount": {
                "create": true
              },
              "tolerations": []
            },
            "imagePullSecrets": [],
            "ingress": {
              "annotations": {},
              "enabled": false,
              "hosts": [
                "loki.example.com"
              ],
              "ingressClassName": "",
              "paths": {
                "read": [
                  "/api/prom/tail",
                  "/loki/api/v1/tail",
                  "/loki/api",
                  "/api/prom/rules",
                  "/loki/api/v1/rules",
                  "/prometheus/api/v1/rules",
                  "/prometheus/api/v1/alerts"
                ],
                "singleBinary": [
                  "/api/prom/push",
                  "/loki/api/v1/push",
                  "/api/prom/tail",
                  "/loki/api/v1/tail",
                  "/loki/api",
                  "/api/prom/rules",
                  "/loki/api/v1/rules",
                  "/prometheus/api/v1/rules",
                  "/prometheus/api/v1/alerts"
                ],
                "write": [
                  "/api/prom/push",
                  "/loki/api/v1/push"
                ]
              },
              "tls": []
            },
            "kubectlImage": {
              "digest": null,
              "pullPolicy": "IfNotPresent",
              "registry": "docker.io",
              "repository": "bitnami/kubectl",
              "tag": null
            },
            "loki": {
              "analytics": {},
              "annotations": {},
              "auth_enabled": true,
              "commonConfig": {
                "compactor_address": "{{ include \"loki.compactorAddress\" . }}",
                "path_prefix": "/var/loki",
                "replication_factor": 3
              },
              "compactor": {},
              "config": "{{- if .Values.enterprise.enabled}}\n{{- tpl .Values.enterprise.config . }}\n{{- else }}\nauth_enabled: {{ .Values.loki.auth_enabled }}\n{{- end }}\n\n{{- with .Values.loki.server }}\nserver:\n  {{- toYaml . | nindent 2}}\n{{- end}}\n\nmemberlist:\n{{- if .Values.loki.memberlistConfig }}\n  {{- toYaml .Values.loki.memberlistConfig | nindent 2 }}\n{{- else }}\n{{- if .Values.loki.extraMemberlistConfig}}\n{{- toYaml .Values.loki.extraMemberlistConfig | nindent 2}}\n{{- end }}\n  join_members:\n    - {{ include \"loki.memberlist\" . }}\n    {{- with .Values.migrate.fromDistributed }}\n    {{- if .enabled }}\n    - {{ .memberlistService }}\n    {{- end }}\n    {{- end }}\n{{- end }}\n\n{{- with .Values.loki.ingester }}\ningester:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- if .Values.loki.commonConfig}}\ncommon:\n{{- toYaml .Values.loki.commonConfig | nindent 2}}\n  storage:\n  {{- include \"loki.commonStorageConfig\" . | nindent 4}}\n{{- end}}\n\n{{- with .Values.loki.limits_config }}\nlimits_config:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\nruntime_config:\n  file: /etc/loki/runtime-config/runtime-config.yaml\n\n{{- with .Values.loki.memcached.chunk_cache }}\n{{- if and .enabled (or .host .addresses) }}\nchunk_store_config:\n  chunk_cache_config:\n    memcached:\n      batch_size: {{ .batch_size }}\n      parallelism: {{ .parallelism }}\n    memcached_client:\n      {{- if .host }}\n      host: {{ .host }}\n      {{- end }}\n      {{- if .addresses }}\n      addresses: {{ .addresses }}\n      {{- end }}\n      service: {{ .service }}\n{{- end }}\n{{- end }}\n\n{{- if .Values.loki.schemaConfig }}\nschema_config:\n{{- toYaml .Values.loki.schemaConfig | nindent 2}}\n{{- else }}\nschema_config:\n  configs:\n    - from: 2022-01-11\n      store: boltdb-shipper\n      object_store: {{ .Values.loki.storage.type }}\n      schema: v12\n      index:\n        prefix: loki_index_\n        period: 24h\n{{- end }}\n\n{{ include \"loki.rulerConfig\" . }}\n\ntable_manager:\n  retention_deletes_enabled: {{ .Values.tableManager.retention_deletes_enabled }}\n  retention_period: {{ .Values.tableManager.retention_period }}\n\n{{- with .Values.loki.memcached.results_cache }}\nquery_range:\n  align_queries_with_step: true\n  {{- if and .enabled (or .host .addresses) }}\n  cache_results: {{ .enabled }}\n  results_cache:\n    cache:\n      default_validity: {{ .default_validity }}\n      memcached_client:\n        {{- if .host }}\n        host: {{ .host }}\n        {{- end }}\n        {{- if .addresses }}\n        addresses: {{ .addresses }}\n        {{- end }}\n        service: {{ .service }}\n        timeout: {{ .timeout }}\n  {{- end }}\n{{- end }}\n\n{{- with .Values.loki.storage_config }}\nstorage_config:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- with .Values.loki.query_scheduler }}\nquery_scheduler:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- with .Values.loki.compactor }}\ncompactor:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- with .Values.loki.analytics }}\nanalytics:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- with .Values.loki.querier }}\nquerier:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- with .Values.loki.index_gateway }}\nindex_gateway:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- with .Values.loki.frontend }}\nfrontend:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- with .Values.loki.frontend_worker }}\nfrontend_worker:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n",
              "configStorageType": "ConfigMap",
              "containerSecurityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "readOnlyRootFilesystem": true
              },
              "enableServiceLinks": true,
              "existingSecretForConfig": "",
              "externalConfigSecretName": "{{ include \"loki.name\" . }}",
              "extraMemberlistConfig": {},
              "frontend": {
                "scheduler_address": "{{ include \"loki.querySchedulerAddress\" . }}"
              },
              "frontend_worker": {
                "scheduler_address": "{{ include \"loki.querySchedulerAddress\" . }}"
              },
              "image": {
                "digest": null,
                "pullPolicy": "IfNotPresent",
                "registry": "docker.io",
                "repository": "grafana/loki",
                "tag": null
              },
              "index_gateway": {
                "mode": "ring"
              },
              "ingester": {},
              "limits_config": {
                "enforce_metric_name": false,
                "max_cache_freshness_per_query": "10m",
                "reject_old_samples": true,
                "reject_old_samples_max_age": "168h",
                "split_queries_by_interval": "15m"
              },
              "memberlistConfig": {},
              "memcached": {
                "chunk_cache": {
                  "batch_size": 256,
                  "enabled": false,
                  "host": "",
                  "parallelism": 10,
                  "service": "memcached-client"
                },
                "results_cache": {
                  "default_validity": "12h",
                  "enabled": false,
                  "host": "",
                  "service": "memcached-client",
                  "timeout": "500ms"
                }
              },
              "podAnnotations": {},
              "podLabels": {},
              "podSecurityContext": {
                "fsGroup": 10001,
                "runAsGroup": 10001,
                "runAsNonRoot": true,
                "runAsUser": 10001
              },
              "querier": {},
              "query_scheduler": {},
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": "http-metrics"
                },
                "initialDelaySeconds": 30,
                "timeoutSeconds": 1
              },
              "revisionHistoryLimit": 10,
              "rulerConfig": {},
              "runtimeConfig": {},
              "schemaConfig": {},
              "server": {
                "grpc_listen_port": 9095,
                "http_listen_port": 3100
              },
              "storage": {
                "azure": {
                  "accountKey": null,
                  "accountName": null,
                  "requestTimeout": null,
                  "useFederatedToken": false,
                  "useManagedIdentity": false,
                  "userAssignedId": null
                },
                "bucketNames": {
                  "admin": "admin",
                  "chunks": "chunks",
                  "ruler": "ruler"
                },
                "filesystem": {
                  "chunks_directory": "/var/loki/chunks",
                  "rules_directory": "/var/loki/rules"
                },
                "gcs": {
                  "chunkBufferSize": 0,
                  "enableHttp2": true,
                  "requestTimeout": "0s"
                },
                "s3": {
                  "accessKeyId": null,
                  "endpoint": null,
                  "http_config": {},
                  "insecure": false,
                  "region": null,
                  "s3": null,
                  "s3ForcePathStyle": false,
                  "secretAccessKey": null,
                  "signatureVersion": null
                },
                "type": "s3"
              },
              "storage_config": {
                "hedging": {
                  "at": "250ms",
                  "max_per_second": 20,
                  "up_to": 3
                }
              },
              "structuredConfig": {},
              "tenants": []
            },
            "memberlist": {
              "service": {
                "publishNotReadyAddresses": false
              }
            },
            "migrate": {
              "fromDistributed": {
                "enabled": false,
                "memberlistService": ""
              }
            },
            "minio": {
              "DeploymentUpdate": {
                "maxSurge": "100%",
                "maxUnavailable": 0,
                "type": "RollingUpdate"
              },
              "StatefulSetUpdate": {
                "updateStrategy": "RollingUpdate"
              },
              "additionalAnnotations": [],
              "additionalLabels": [],
              "affinity": {},
              "bucketRoot": "",
              "buckets": [
                {
                  "name": "chunks",
                  "policy": "none",
                  "purge": false
                },
                {
                  "name": "ruler",
                  "policy": "none",
                  "purge": false
                },
                {
                  "name": "admin",
                  "policy": "none",
                  "purge": false
                }
              ],
              "certsPath": "/etc/minio/certs/",
              "clusterDomain": "cluster.local",
              "configPathmc": "/etc/minio/mc/",
              "consoleIngress": {
                "annotations": {},
                "enabled": false,
                "hosts": [
                  "console.minio-example.local"
                ],
                "labels": {},
                "path": "/",
                "tls": []
              },
              "consoleService": {
                "clusterIP": null,
                "nodePort": 32001,
                "port": "9001",
                "type": "ClusterIP"
              },
              "customCommandJob": {
                "affinity": {},
                "annotations": null,
                "exitCommand": "",
                "nodeSelector": {},
                "podAnnotations": null,
                "resources": {
                  "requests": {
                    "memory": "128Mi"
                  }
                },
                "securityContext": {
                  "enabled": false,
                  "fsGroup": 1000,
                  "runAsGroup": 1000,
                  "runAsUser": 1000
                },
                "tolerations": []
              },
              "customCommands": null,
              "drivesPerNode": 2,
              "enabled": false,
              "environment": null,
              "etcd": {
                "clientCert": "",
                "clientCertKey": "",
                "corednsPathPrefix": "",
                "endpoints": [],
                "pathPrefix": ""
              },
              "existingSecret": "",
              "extraArgs": [],
              "fullnameOverride": "",
              "gateway": {
                "replicas": 4,
                "type": "nas"
              },
              "global": {
                "clusterDomain": "cluster.local",
                "dnsNamespace": "kube-system",
                "dnsService": "kube-dns",
                "image": {
                  "registry": null
                },
                "priorityClassName": null
              },
              "ignoreChartChecksums": false,
              "image": {
                "pullPolicy": "IfNotPresent",
                "repository": "quay.io/minio/minio",
                "tag": "RELEASE.2022-08-13T21-54-44Z"
              },
              "imagePullSecrets": [],
              "ingress": {
                "annotations": {},
                "enabled": false,
                "hosts": [
                  "minio-example.local"
                ],
                "labels": {},
                "path": "/",
                "tls": []
              },
              "makeBucketJob": {
                "affinity": {},
                "annotations": null,
                "exitCommand": "",
                "nodeSelector": {},
                "podAnnotations": null,
                "resources": {
                  "requests": {
                    "memory": "128Mi"
                  }
                },
                "securityContext": {
                  "enabled": false,
                  "fsGroup": 1000,
                  "runAsGroup": 1000,
                  "runAsUser": 1000
                },
                "tolerations": []
              },
              "makePolicyJob": {
                "affinity": {},
                "annotations": null,
                "exitCommand": "",
                "nodeSelector": {},
                "podAnnotations": null,
                "resources": {
                  "requests": {
                    "memory": "128Mi"
                  }
                },
                "securityContext": {
                  "enabled": false,
                  "fsGroup": 1000,
                  "runAsGroup": 1000,
                  "runAsUser": 1000
                },
                "tolerations": []
              },
              "makeUserJob": {
                "affinity": {},
                "annotations": null,
                "exitCommand": "",
                "nodeSelector": {},
                "podAnnotations": null,
                "resources": {
                  "requests": {
                    "memory": "128Mi"
                  }
                },
                "securityContext": {
                  "enabled": false,
                  "fsGroup": 1000,
                  "runAsGroup": 1000,
                  "runAsUser": 1000
                },
                "tolerations": []
              },
              "mcImage": {
                "pullPolicy": "IfNotPresent",
                "repository": "quay.io/minio/mc",
                "tag": "RELEASE.2022-08-11T00-30-48Z"
              },
              "metrics": {
                "serviceMonitor": {
                  "additionalLabels": {},
                  "annotations": {},
                  "enabled": false,
                  "public": true,
                  "relabelConfigs": {}
                }
              },
              "minioAPIPort": "9000",
              "minioConsolePort": "9001",
              "mode": "distributed",
              "mountPath": "/export",
              "nameOverride": "",
              "networkPolicy": {
                "allowExternal": true,
                "enabled": false
              },
              "nodeSelector": {},
              "oidc": {
                "claimName": "policy",
                "claimPrefix": "",
                "clientId": "minio",
                "clientSecret": "",
                "comment": "",
                "configUrl": "https://identity-provider-url/.well-known/openid-configuration",
                "enabled": false,
                "redirectUri": "https://console-endpoint-url/oauth_callback",
                "scopes": "openid,profile,email"
              },
              "persistence": {
                "VolumeName": "",
                "accessMode": "ReadWriteOnce",
                "annotations": {},
                "enabled": true,
                "existingClaim": "",
                "size": "5Gi",
                "storageClass": "",
                "subPath": ""
              },
              "podAnnotations": {},
              "podDisruptionBudget": {
                "enabled": false,
                "maxUnavailable": 1
              },
              "podLabels": {},
              "policies": [],
              "pools": 1,
              "priorityClassName": "",
              "replicas": 1,
              "resources": {
                "requests": {
                  "cpu": "100m",
                  "memory": "128Mi"
                }
              },
              "rootPassword": "supersecret",
              "rootUser": "enterprise-logs",
              "runtimeClassName": "",
              "securityContext": {
                "enabled": true,
                "fsGroup": 1000,
                "fsGroupChangePolicy": "OnRootMismatch",
                "runAsGroup": 1000,
                "runAsUser": 1000
              },
              "service": {
                "clusterIP": null,
                "nodePort": 32000,
                "port": "9000",
                "type": "ClusterIP"
              },
              "serviceAccount": {
                "create": true,
                "name": "minio-sa"
              },
              "tls": {
                "certSecret": "",
                "enabled": false,
                "privateKey": "private.key",
                "publicCrt": "public.crt"
              },
              "tolerations": [],
              "topologySpreadConstraints": [],
              "trustedCertsSecret": "",
              "users": [
                {
                  "accessKey": "console",
                  "policy": "consoleAdmin",
                  "secretKey": "console123"
                }
              ]
            },
            "monitoring": {
              "dashboards": {
                "annotations": {},
                "enabled": true,
                "labels": {
                  "grafana_dashboard": "1"
                },
                "namespace": null
              },
              "lokiCanary": {
                "annotations": {},
                "enabled": true,
                "extraArgs": [],
                "extraEnv": [],
                "extraEnvFrom": [],
                "image": {
                  "digest": null,
                  "pullPolicy": "IfNotPresent",
                  "registry": "docker.io",
                  "repository": "grafana/loki-canary",
                  "tag": null
                },
                "nodeSelector": {},
                "podLabels": {},
                "resources": {},
                "tolerations": []
              },
              "rules": {
                "additionalGroups": [],
                "alerting": true,
                "annotations": {},
                "enabled": true,
                "labels": {},
                "namespace": null
              },
              "selfMonitoring": {
                "enabled": true,
                "grafanaAgent": {
                  "annotations": {},
                  "enableConfigReadAPI": false,
                  "installOperator": true,
                  "labels": {}
                },
                "logsInstance": {
                  "annotations": {},
                  "clients": null,
                  "labels": {}
                },
                "podLogs": {
                  "annotations": {},
                  "labels": {},
                  "relabelings": []
                },
                "tenant": {
                  "name": "self-monitoring",
                  "secretNamespace": "{{ .Release.Namespace }}"
                }
              },
              "serviceMonitor": {
                "annotations": {},
                "enabled": true,
                "interval": "15s",
                "labels": {},
                "metricsInstance": {
                  "annotations": {},
                  "enabled": true,
                  "labels": {},
                  "remoteWrite": null
                },
                "namespaceSelector": {},
                "relabelings": [],
                "scheme": "http",
                "scrapeTimeout": null,
                "tlsConfig": null
              }
            },
            "nameOverride": null,
            "networkPolicy": {
              "alertmanager": {
                "namespaceSelector": {},
                "podSelector": {},
                "port": 9093
              },
              "discovery": {
                "namespaceSelector": {},
                "podSelector": {},
                "port": null
              },
              "enabled": false,
              "externalStorage": {
                "cidrs": [],
                "ports": []
              },
              "ingress": {
                "namespaceSelector": {},
                "podSelector": {}
              },
              "metrics": {
                "cidrs": [],
                "namespaceSelector": {},
                "podSelector": {}
              }
            },
            "rbac": {
              "pspEnabled": false,
              "sccEnabled": false
            },
            "read": {
              "affinity": "podAntiAffinity:\n  requiredDuringSchedulingIgnoredDuringExecution:\n    - labelSelector:\n        matchLabels:\n          {{- include \"loki.readSelectorLabels\" . | nindent 10 }}\n      topologyKey: kubernetes.io/hostname\n",
              "annotations": {},
              "autoscaling": {
                "behavior": {},
                "enabled": false,
                "maxReplicas": 3,
                "minReplicas": 1,
                "targetCPUUtilizationPercentage": 60,
                "targetMemoryUtilizationPercentage": null
              },
              "extraArgs": [],
              "extraEnv": [],
              "extraEnvFrom": [],
              "extraVolumeMounts": [],
              "extraVolumes": [],
              "image": {
                "registry": null,
                "repository": null,
                "tag": null
              },
              "legacyReadTarget": false,
              "lifecycle": {},
              "nodeSelector": {},
              "persistence": {
                "enableStatefulSetAutoDeletePVC": true,
                "selector": null,
                "size": "10Gi",
                "storageClass": null
              },
              "podAnnotations": {},
              "podLabels": {},
              "podManagementPolicy": "Parallel",
              "priorityClassName": null,
              "replicas": 3,
              "resources": {},
              "selectorLabels": {},
              "serviceLabels": {},
              "targetModule": "read",
              "terminationGracePeriodSeconds": 30,
              "tolerations": []
            },
            "serviceAccount": {
              "annotations": {},
              "automountServiceAccountToken": true,
              "create": true,
              "imagePullSecrets": [],
              "labels": {},
              "name": null
            },
            "singleBinary": {
              "affinity": "podAntiAffinity:\n  requiredDuringSchedulingIgnoredDuringExecution:\n    - labelSelector:\n        matchLabels:\n          {{- include \"loki.singleBinarySelectorLabels\" . | nindent 10 }}\n      topologyKey: kubernetes.io/hostname\n",
              "annotations": {},
              "autoscaling": {
                "enabled": false,
                "maxReplicas": 3,
                "minReplicas": 1,
                "targetCPUUtilizationPercentage": 60,
                "targetMemoryUtilizationPercentage": null
              },
              "extraArgs": [],
              "extraContainers": [],
              "extraEnv": [],
              "extraEnvFrom": [],
              "extraVolumeMounts": [],
              "extraVolumes": [],
              "image": {
                "registry": null,
                "repository": null,
                "tag": null
              },
              "initContainers": [],
              "nodeSelector": {},
              "persistence": {
                "enableStatefulSetAutoDeletePVC": true,
                "enabled": true,
                "selector": null,
                "size": "10Gi",
                "storageClass": null
              },
              "podAnnotations": {},
              "podLabels": {},
              "priorityClassName": null,
              "replicas": 0,
              "resources": {},
              "selectorLabels": {},
              "targetModule": "all",
              "terminationGracePeriodSeconds": 30,
              "tolerations": []
            },
            "tableManager": {
              "affinity": "podAntiAffinity:\n  requiredDuringSchedulingIgnoredDuringExecution:\n    - labelSelector:\n        matchLabels:\n          {{- include \"loki.tableManagerSelectorLabels\" . | nindent 10 }}\n      topologyKey: kubernetes.io/hostname\n  preferredDuringSchedulingIgnoredDuringExecution:\n    - weight: 100\n      podAffinityTerm:\n        labelSelector:\n          matchLabels:\n            {{- include \"loki.tableManagerSelectorLabels\" . | nindent 12 }}\n        topologyKey: failure-domain.beta.kubernetes.io/zone\n",
              "annotations": {},
              "command": null,
              "enabled": false,
              "extraArgs": [],
              "extraContainers": [],
              "extraEnv": [],
              "extraEnvFrom": [],
              "extraVolumeMounts": [],
              "extraVolumes": [],
              "image": {
                "registry": null,
                "repository": null,
                "tag": null
              },
              "nodeSelector": {},
              "podAnnotations": {},
              "podLabels": {},
              "priorityClassName": null,
              "resources": {},
              "retention_deletes_enabled": false,
              "retention_period": 0,
              "serviceLabels": {},
              "terminationGracePeriodSeconds": 30,
              "tolerations": []
            },
            "test": {
              "annotations": {},
              "enabled": true,
              "image": {
                "digest": null,
                "pullPolicy": "IfNotPresent",
                "registry": "docker.io",
                "repository": "grafana/loki-helm-test",
                "tag": null
              },
              "labels": {},
              "prometheusAddress": "http://prometheus:9090",
              "timeout": "1m"
            },
            "tracing": {
              "jaegerAgentHost": ""
            },
            "write": {
              "affinity": "podAntiAffinity:\n  requiredDuringSchedulingIgnoredDuringExecution:\n    - labelSelector:\n        matchLabels:\n          {{- include \"loki.writeSelectorLabels\" . | nindent 10 }}\n      topologyKey: kubernetes.io/hostname\n",
              "annotations": {},
              "autoscaling": {
                "behavior": {
                  "scaleDown": {
                    "policies": [
                      {
                        "periodSeconds": 1800,
                        "type": "Pods",
                        "value": 1
                      }
                    ],
                    "stabilizationWindowSeconds": 3600
                  },
                  "scaleUp": {
                    "policies": [
                      {
                        "periodSeconds": 900,
                        "type": "Pods",
                        "value": 1
                      }
                    ]
                  }
                },
                "enabled": false,
                "maxReplicas": 3,
                "minReplicas": 1,
                "targetCPUUtilizationPercentage": 60,
                "targetMemoryUtilizationPercentage": null
              },
              "extraArgs": [],
              "extraEnv": [],
              "extraEnvFrom": [],
              "extraVolumeClaimTemplates": [],
              "extraVolumeMounts": [],
              "extraVolumes": [],
              "image": {
                "registry": null,
                "repository": null,
                "tag": null
              },
              "initContainers": [],
              "lifecycle": {},
              "nodeSelector": {},
              "persistence": {
                "enableStatefulSetAutoDeletePVC": false,
                "selector": null,
                "size": "10Gi",
                "storageClass": null
              },
              "podAnnotations": {},
              "podLabels": {},
              "podManagementPolicy": "Parallel",
              "priorityClassName": null,
              "replicas": 3,
              "resources": {},
              "selectorLabels": {},
              "serviceLabels": {},
              "targetModule": "write",
              "terminationGracePeriodSeconds": 300,
              "tolerations": []
            }
          }
        }
      ]
    capabilities: Basic Install
    createdAt: "2023-06-22T19:21:20Z"
    operators.operatorframework.io/builder: operator-sdk-v1.29.0
    operators.operatorframework.io/project_layout: hybrid.helm.sdk.operatorframework.io/v1-alpha
  name: loki-helm-operator.v0.0.1
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - kind: Loki
      name: lokis.charts.example.com
      version: v1alpha1
  description: Loki operator based on the helm chart with single binary mode deployment
    optionality
  displayName: Loki Helm Operator
  icon:
  - base64data: ""
    mediatype: ""
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
        - apiGroups:
          - ""
          resources:
          - secrets
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
        - apiGroups:
          - charts.example.com
          resources:
          - lokis
          - lokis/status
          - lokis/finalizers
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - rbac.authorization.k8s.io
          resources:
          - clusterrolebindings
          - clusterroles
          verbs:
          - '*'
        - apiGroups:
          - policy
          resources:
          - poddisruptionbudgets
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - configmaps
          - serviceaccounts
          - services
          verbs:
          - '*'
        - apiGroups:
          - apps
          resources:
          - daemonsets
          - deployments
          - statefulsets
          verbs:
          - '*'
        - apiGroups:
          - authentication.k8s.io
          resources:
          - tokenreviews
          verbs:
          - create
        - apiGroups:
          - authorization.k8s.io
          resources:
          - subjectaccessreviews
          verbs:
          - create
        serviceAccountName: loki-helm-operator-controller-manager
      deployments:
      - label:
          app.kubernetes.io/component: manager
          app.kubernetes.io/created-by: loki-helm-operator
          app.kubernetes.io/instance: controller-manager
          app.kubernetes.io/managed-by: kustomize
          app.kubernetes.io/name: deployment
          app.kubernetes.io/part-of: loki-helm-operator
          control-plane: controller-manager
        name: loki-helm-operator-controller-manager
        spec:
          replicas: 1
          selector:
            matchLabels:
              control-plane: controller-manager
          strategy: {}
          template:
            metadata:
              annotations:
                kubectl.kubernetes.io/default-container: manager
              labels:
                control-plane: controller-manager
            spec:
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                    - matchExpressions:
                      - key: kubernetes.io/arch
                        operator: In
                        values:
                        - amd64
                        - arm64
                        - ppc64le
                        - s390x
                      - key: kubernetes.io/os
                        operator: In
                        values:
                        - linux
              containers:
              - args:
                - --secure-listen-address=0.0.0.0:8443
                - --upstream=http://127.0.0.1:8080/
                - --logtostderr=true
                - --v=0
                image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
                name: kube-rbac-proxy
                ports:
                - containerPort: 8443
                  name: https
                  protocol: TCP
                resources:
                  limits:
                    cpu: 500m
                    memory: 128Mi
                  requests:
                    cpu: 5m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              - args:
                - --health-probe-bind-address=:8081
                - --metrics-bind-address=127.0.0.1:8080
                - --leader-elect
                - --leader-election-id=loki-helm-operator
                image: controller:latest
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 8081
                  initialDelaySeconds: 15
                  periodSeconds: 20
                name: manager
                readinessProbe:
                  httpGet:
                    path: /readyz
                    port: 8081
                  initialDelaySeconds: 5
                  periodSeconds: 10
                resources:
                  limits:
                    cpu: 500m
                    memory: 128Mi
                  requests:
                    cpu: 10m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              securityContext:
                runAsNonRoot: true
              serviceAccountName: loki-helm-operator-controller-manager
              terminationGracePeriodSeconds: 10
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
          - patch
        serviceAccountName: loki-helm-operator-controller-manager
    strategy: deployment
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - loki
  - single-binary
  - demo
  - helm
  links:
  - name: Loki Helm Operator
    url: https://loki-helm-operator.domain
  maturity: alpha
  provider:
    name: Sid
    url: skattoju.net
  version: 0.0.1
